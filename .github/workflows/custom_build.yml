name: Compile and Deploy GhostESP (Waveshare LCD)

on:
  workflow_dispatch:
    inputs:
      buildType:
        description: "Select the build type"
        required: true
        type: choice
        options:
          - "prerelease"
          - "release"
        default: "prerelease"

jobs:
  build:
    name: Build for Waveshare ESP32-S3-Touch-LCD-1.69
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install ESP-IDF
        run: |
          sudo apt-get update
          sudo apt-get install -y wget git flex bison gperf python3-pip python3-setuptools cmake ninja-build ccache libffi-dev libssl-dev dfu-util
          git clone -b v5.3.1 --depth 1 https://github.com/espressif/esp-idf.git ~/esp-idf
          ~/esp-idf/install.sh

      - name: Check for SDK Config File
        id: check_config
        uses: andstor/file-existence-action@v2
        with:
          file: "configs/sdkconfig.waveshare169"

      - name: Apply Custom SDK Config (Waveshare)
        if: steps.check_config.outputs.files_exists == 'true'
        run: cp "configs/sdkconfig.waveshare169" sdkconfig.defaults
        
      - name: Apply default SDK config (waveshare)
        if: steps.check_config.outputs.files_exists == 'false'
        run: cp "configs/sdkconfig.default.esp32s3" sdkconfig.defaults # Use default if custom config doesn't exist.

      - name: Set up ESP-IDF and Target
        run: |
          . ~/esp-idf/export.sh
          export IDF_TARGET=esp32s3
          echo "IDF_TARGET=esp32s3" >> $GITHUB_ENV

      - name: Clean and Build Project
        env:
          SDKCONFIG_DEFAULTS: "sdkconfig.defaults"
        run: |
          . ~/esp-idf/export.sh
          idf.py clean
          idf.py build

      - name: Download Bootloader
        run: |
          BOOTLOADER_URL="https://cdn.spookytools.com/bootloaders/esp32s3.bin"
          BOOTLOADER_PATH="build/bootloader.bin"
          echo "Downloading bootloader from $BOOTLOADER_URL..."
          curl -L -o "$BOOTLOADER_PATH" "$BOOTLOADER_URL"
          if [ ! -f "$BOOTLOADER_PATH" ]; then
            echo "Error: Bootloader could not be downloaded."
            exit 1
          fi
          echo "Bootloader downloaded successfully."

      - name: Package Artifacts into ZIP
        run: |
          ARTIFACT_DIR="packaged_artifacts"
          ZIP_FILE="waveshare_esp32s3_169.zip"
          mkdir -p "$ARTIFACT_DIR"
          cp build/partition_table/partition-table.bin "$ARTIFACT_DIR/"
          cp build/*.bin "$ARTIFACT_DIR/"
          cd "$ARTIFACT_DIR"
          zip "../$ZIP_FILE" ./*
          cd ..
          ls -lh "$ZIP_FILE"

      - uses: actions/upload-artifact@v4
        with:
          name: waveshare_esp32s3_169.zip
          path: waveshare_esp32s3_169.zip

  upload_release:
    name: Upload Release Artifacts
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: waveshare_esp32s3_169.zip
          path: release_artifacts

      - name: Install rclone
        run: curl -fsSL https://rclone.org/install.sh | sudo bash

      - name: Configure rclone for Cloudflare R2
        env:
          R2_ACCESS_KEY: ${{ secrets.R2_ACCESS_KEY }}
          R2_SECRET_KEY: ${{ secrets.R2_SECRET_KEY }}
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << EOF
          [cloudflare_r2]
          type = s3
          provider = Cloudflare
          access_key_id = $R2_ACCESS_KEY
          secret_access_key = $R2_SECRET_KEY
          endpoint = https://fb5f7d31bedfe4f3538ddfa6db491962.r2.cloudflarestorage.com
          EOF

      - name: Upload Artifacts to R2
        env:
          R2_BUCKET: "spooksapi"
        run: |
          rclone copy "release_artifacts/waveshare_esp32s3_169.zip" "cloudflare_r2:${{ github.event.inputs.buildType == 'prerelease' && 'GhostESPBins/prerelease' || 'GhostESPBins' }}" --progress --s3-no-check-bucket

      - id: get_release
        name: Get Latest Release ID
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_release=$(gh api repos/${{ github.repository }}/releases --jq '.[0].id')
          echo "release_id=$latest_release" >> $GITHUB_OUTPUT

      - name: Upload to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/zip" \
            --data-binary @"release_artifacts/waveshare_esp32s3_169.zip" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.get_release.outputs.release_id }}/assets?name=waveshare_esp32s3_169.zip"

      - name: Get Commit History (Prerelease)
        if: github.event.inputs.buildType == 'prerelease'
        id: get_commits
        run: |
          commits=$(git log --pretty=format:"- %s" -n 10)
          commits="${commits//'%'/'%25'}"
          commits="${commits//$'\n'/'\\n'}"
          commits="${commits//$'\r'/'%0D'}"
          commits="${commits//'"'/'\"'}"
          echo "commits=$commits" >> $GITHUB_OUTPUT

      - name: Notify Discord (Prerelease)
        if: github.event.inputs.buildType == 'prerelease'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          BUILD_DATE=$(date -u +"%Y-%m-%d")
          BUILD_VERSION=$(date -u +"%Y%m%d")

          curl -H "Content-Type: application/json" -d '{
            "embeds": [{
              "title": "ðŸš€ GhostESP Prerelease Build - '"$BUILD_DATE"' (Waveshare 1.69\")",
              "description": "A new prerelease build for the Waveshare ESP32-S3-Touch-LCD-1.69 has been uploaded to Cloudflare R2 and GitHub Release.\\n\\n**Version:** Pre-'"$BUILD_VERSION"'\\n\\n**Changes since last prerelease:**\\n'"${{ steps.get_commits.outputs.commits }}"'\\n\\n**Flash your device:**\\nðŸ”— [Flash using GhostESP Web Flasher](https://flasher.ghostesp.net)",
              "color": 16750848,
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
              "footer": {
                "text": "GhostESP Prerelease Build '"$BUILD_VERSION"'"
              }
            }]
          }' "$DISCORD_WEBHOOK_URL"

      - name: Notify Discord (Release)
        if: github.event.inputs.buildType == 'release'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run:
